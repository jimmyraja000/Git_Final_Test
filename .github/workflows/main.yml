name: Build & Deploy Pipeline for Dev
on:
  push:
    branches:
       - main
# env:
#   AZURE_WEBAPP_PACKAGE_PATH: 'C:\actions-runner3\_work\GitNewTest2\GitNewTest2\GitNewTest2\bin'
#   DEV_WEBSITE_NAME: ${{secrets.WEBSITE_NAME}}
#   DEV_APP_POOL_NAME: ${{secrets.APP_POOL_NAME}}
#   DEV_WEBAPP_MSDeploy_USERNAME: ${{secrets.IIS_USERNAME}}
#   DEV_WEBAPP_MSDeploy_PASSWORD: ${{secrets.IIS_PASSWORD}}
  
jobs:
  Build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    - name: Restore NuGet packages
      run: nuget restore Git_Final_Test/Git_Final_Test.sln

    - name: build
      run: |
           msbuild Git_Final_Test/Git_Final_Test.sln /t:Build /p:Configuration=Release /p:Platform="Any CPU" /verbosity:minimal
    - name: publish
      run: |
           msbuild Git_Final_Test/Git_Final_Test.sln /t:Publish /p:Configuration=Release /p:Platform="Any CPU" /p:PublishDir="./artifacts"
   
      
      #--output ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
      
#    - name: Upload artifacts
 #     uses: actions/upload-artifact@v2
  #    with:
   #     name: MyProject artifacts
    #  #  path: bin/Release
      
   # - name: Upload artifacts
    #  uses: actions/upload-artifact@v2
     # with:
      #      name: myapp
       #     path: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
       
   DeployDev:
      name: Dev
      needs: Build
#       if: github.event_name == 'refs/heads/master'
      runs-on: self-hosted
      env:
        DEV_WEBSITE_NAME: ${{secrets.DEV_WEBSITE_NAME}}
        DEV_APP_POOL_NAME: ${{secrets.DEV_APP_POOL_NAME}}
#         WEBAPP_MSDeploy_USERNAME: ${{secrets.IIS_USERNAME}}
#         WEBAPP_MSDeploy_PASSWORD: ${{secrets.IIS_PASSWORD}}
      environment:
          name: Dev
      steps:
      # - name: Download artifacts
       #  uses: actions/download-artifact@v2
        # with:
         # name: myapp
          #path: artifacts/
       - name: copying
         run: |
              Set-ExecutionPolicy RemoteSigned
              & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\DevTestScript.ps1
        
              cd C:\inetpub\wwwroot\
 
              Copy-Item C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\* C:\inetpub\wwwroot\${{env.DEV_WEBSITE_NAME}} -Recurse -Force

       - name: create new apppool
         run: |
             & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\DevTestAppPool.ps1
       - name: create website
         run: |
              & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\DevTestWebsite.ps1
       - name: config to use new appool
         run: |
             Import-Module WebAdministration
             Set-ItemProperty -Path "IIS:\Sites\${{env.DEV_WEBSITE_NAME}}" -Name "applicationPool" -Value ${{env.DEV_APP_POOL_NAME}}
             
  
       - name: Deploy to IIS
         run: |
              # start-process PowerShell -verb runas 
              iisreset /stop
             
              iisreset /start
  Deploy to PreProd:
      name: PreProd
      needs: Build
      if: github.event_name == 'refs/heads/PreProd'
      runs-on: self-hosted
      env:
        DEV_WEBSITE_NAME: ${{secrets.PREPROD_WEBSITE_NAME}}
        DEV_APP_POOL_NAME: ${{secrets.PREPROD_APP_POOL_NAME}}
#         WEBAPP_MSDeploy_USERNAME: ${{secrets.IIS_USERNAME}}
#         WEBAPP_MSDeploy_PASSWORD: ${{secrets.IIS_PASSWORD}}
      environment:
          name: PreProd
      steps:
      # - name: Download artifacts
       #  uses: actions/download-artifact@v2
        # with:
         # name: myapp
          #path: artifacts/
       - name: copying
         run: |
              Set-ExecutionPolicy RemoteSigned
              & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\DevTestScript.ps1
        
              cd C:\inetpub\wwwroot\
 
              Copy-Item C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\* C:\inetpub\wwwroot\${{env.PREPROD_WEBSITE_NAME}} -Recurse -Force

       - name: create new apppool
         run: |
             & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\PreProdTestAppPool.ps1
       - name: create website
         run: |
              & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\PreProdTestWebsite.ps1
       - name: config to use new appool
         run: |
             Import-Module WebAdministration
             Set-ItemProperty -Path "IIS:\Sites\${{env.PREPROD_WEBSITE_NAME}}" -Name "applicationPool" -Value ${{env.PREPROD_APP_POOL_NAME}}
             
  
       - name: Deploy to IIS
         run: |
              # start-process PowerShell -verb runas 
              iisreset /stop
             
              iisreset /start

  DeployProd:
      name: Prod
      needs: PreProd
      if: github.event_name == 'refs/heads/main'
      runs-on: self-hosted
      env:
        DEV_WEBSITE_NAME: ${{secrets.PROD_WEBSITE_NAME}}
        DEV_APP_POOL_NAME: ${{secrets.PROD_APP_POOL_NAME}}
#         WEBAPP_MSDeploy_USERNAME: ${{secrets.IIS_USERNAME}}
#         WEBAPP_MSDeploy_PASSWORD: ${{secrets.IIS_PASSWORD}}
      environment:
          name: Prod
      steps:
      # - name: Download artifacts
       #  uses: actions/download-artifact@v2
        # with:
         # name: myapp
          #path: artifacts/
       - name: copying
         run: |
              Set-ExecutionPolicy RemoteSigned
              & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\ProdTestScript.ps1
        
              cd C:\inetpub\wwwroot\
 
              Copy-Item C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\* C:\inetpub\wwwroot\${{env.PROD_WEBSITE_NAME}} -Recurse -Force

       - name: create new apppool
         run: |
             & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\ProdTestAppPool.ps1
       - name: create website
         run: |
              & C:\actions-runner5\_work\Git_Final_Test\Git_Final_Test\Git_Final_Test\Psscripts\ProdTestWebsite.ps1
       - name: config to use new appool
         run: |
             Import-Module WebAdministration
             Set-ItemProperty -Path "IIS:\Sites\${{env.PROD_WEBSITE_NAME}}" -Name "applicationPool" -Value ${{env.PROD_APP_POOL_NAME}}
             
  
       - name: Deploy to IIS
         run: |
              # start-process PowerShell -verb runas 
              iisreset /stop
             
              iisreset /start

   
 

          
  
  
          
